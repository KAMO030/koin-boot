import org.gradle.kotlin.dsl.support.uppercaseFirstChar

abstract class KoinBootInitializerExtension {


    private val initializers = mutableSetOf<String>()

    /**
     * 生成的包名
     */
    var generatedPackage: String = "${rootProject.group}.generated"

    /**
     * 生成的类名
     */
    var generatedInitializerName: String = "AppBootInitializer"


    fun include(dependency: Dependency, name: String? = null) {
        val initializerName = if (name != null) name else {
            val dependencyName = dependency.name.split("-", "_").joinToString("") { it.uppercaseFirstChar() }
            "${dependencyName.uppercaseFirstChar()}BootInitializer"
        }
        dependency.group?.let { include(it, initializerName) }
    }

    fun includes(dependencies: Collection<Dependency>) {
        dependencies.forEach { include(it) }
    }

    fun includes(vararg dependencies: Dependency) {
        dependencies.forEach { include(it) }
    }

    fun includes(vararg dependencies: Pair<Dependency, String?>) {
        dependencies.forEach { include(it.first, it.second) }
    }

    fun include(packageName: String, name: String) {
        initializers.add("$packageName.$name")
    }

    internal fun getInitializers() = initializers.toList()

}

/**
 * Task for generating KoinBootInitializer files
 */
@CacheableTask
abstract class GenerateKoinBootInitializerTask : DefaultTask() {


    @get:Input
    abstract var initializers: List<String>

    /**
     * 生成的包名
     */
    @get:Input
    abstract var generatedPackage: String

    /**
     * 生成的类名
     */
    @get:Input
    abstract var generatedInitializerName: String


    @get:OutputDirectory
    abstract val outputDirectory: DirectoryProperty

    @TaskAction
    fun generateBuildConfig() {
        val outputDir = outputDirectory.get().asFile
        outputDir.mkdirs()
        val outputFile = File(outputDir, "${generatedInitializerName}.kt")
        val dependencyList = initializers.joinToString("\n") { " * - [$it]" }
        val initializerCalls = initializers.joinToString("\n") { "\t$it()" }
        val content = """
package $generatedPackage

import io.github.kamo030.koinboot.core.KoinBootInitializer

/**
 * Auto-generated KoinBootInitializer
 * This file is automatically generated by a Gradle build script based on project dependencies.
 * Do not modify this file manually.
 *
 * Found BootInitializers from dependencies:
$dependencyList
 */
val ${generatedInitializerName}: KoinBootInitializer = {
 $initializerCalls
}
        """.trimIndent()

        outputFile.writeText(content)
    }

}

class KoinBootInitializerPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        val extension = project.extensions.create("koinBootInitializer", KoinBootInitializerExtension::class.java)

        val outputDir = project.layout.buildDirectory.dir("generated/koin_boot_initializer")

        val taskName = "generateKoinBootInitializer"
        // 将生成的源码目录添加到源集
        project.afterEvaluate {
            project.tasks.register<GenerateKoinBootInitializerTask>(taskName) {
                group = "build"
                description = "Generate KoinBootInitializer based on project dependencies"
                initializers = extension.getInitializers()
                generatedPackage = extension.generatedPackage
                generatedInitializerName = extension.generatedInitializerName
                outputDirectory.set(outputDir)
            }
        }

        // 让编译任务依赖于生成任务
        project.tasks.matching { it.name.contains("compile", true) }.configureEach {
            dependsOn(taskName)
        }
        project.configureKotlinSourceSets("common", outputDir)
    }


}

apply<KoinBootInitializerPlugin>()
